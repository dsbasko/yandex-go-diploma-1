// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsbasko/yandex-go-diploma-1/services/planner/internal/interfaces (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "github.com/dsbasko/yandex-go-diploma-1/services/planner/internal/entities"
	api "github.com/dsbasko/yandex-go-diploma-1/services/planner/pkg/api"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *api.CreateTaskRequestV1) (*entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockRepository) DeleteByID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRepositoryMockRecorder) DeleteByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRepository)(nil).DeleteByID), arg0, arg1, arg2)
}

// FindArchive mocks base method.
func (m *MockRepository) FindArchive(arg0 context.Context, arg1 string) (*[]entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindArchive", arg0, arg1)
	ret0, _ := ret[0].(*[]entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindArchive indicates an expected call of FindArchive.
func (mr *MockRepositoryMockRecorder) FindArchive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindArchive", reflect.TypeOf((*MockRepository)(nil).FindArchive), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(arg0 context.Context, arg1, arg2 string) (*entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), arg0, arg1, arg2)
}

// FindByUserIDAndDate mocks base method.
func (m *MockRepository) FindByUserIDAndDate(arg0 context.Context, arg1 string, arg2, arg3 *time.Time) (*[]entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndDate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*[]entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndDate indicates an expected call of FindByUserIDAndDate.
func (mr *MockRepositoryMockRecorder) FindByUserIDAndDate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndDate", reflect.TypeOf((*MockRepository)(nil).FindByUserIDAndDate), arg0, arg1, arg2, arg3)
}

// Ping mocks base method.
func (m *MockRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), arg0)
}

// UpdateIsArchive mocks base method.
func (m *MockRepository) UpdateIsArchive(arg0 context.Context, arg1, arg2 string, arg3 bool) (*entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsArchive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsArchive indicates an expected call of UpdateIsArchive.
func (mr *MockRepositoryMockRecorder) UpdateIsArchive(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsArchive", reflect.TypeOf((*MockRepository)(nil).UpdateIsArchive), arg0, arg1, arg2, arg3)
}

// UpdateOnce mocks base method.
func (m *MockRepository) UpdateOnce(arg0 context.Context, arg1, arg2 string, arg3 *api.UpdateTaskRequestV1) (*entities.RepositoryTaskEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnce", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entities.RepositoryTaskEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOnce indicates an expected call of UpdateOnce.
func (mr *MockRepositoryMockRecorder) UpdateOnce(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnce", reflect.TypeOf((*MockRepository)(nil).UpdateOnce), arg0, arg1, arg2, arg3)
}
