// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsbasko/yandex-go-diploma-1/services/auth/internal/domain (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/dsbasko/yandex-go-diploma-1/services/auth/internal/domain"
	api "github.com/dsbasko/yandex-go-diploma-1/services/auth/pkg/api"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOnce mocks base method.
func (m *MockRepository) CreateOnce(arg0 context.Context, arg1 *api.RegisterRequestV1) (*domain.RepositoryAccountEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOnce", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepositoryAccountEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOnce indicates an expected call of CreateOnce.
func (mr *MockRepositoryMockRecorder) CreateOnce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOnce", reflect.TypeOf((*MockRepository)(nil).CreateOnce), arg0, arg1)
}

// FindByUsername mocks base method.
func (m *MockRepository) FindByUsername(arg0 context.Context, arg1 string) (*domain.RepositoryAccountEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0, arg1)
	ret0, _ := ret[0].(*domain.RepositoryAccountEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockRepositoryMockRecorder) FindByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockRepository)(nil).FindByUsername), arg0, arg1)
}

// Ping mocks base method.
func (m *MockRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), arg0)
}
